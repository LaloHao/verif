# -*- auto-export-latex: t -*-
#+MACRO: NEWLINE @@latex:\\@@
#+TITLE: Verificación de circuitos digitales con software libre
# #+SUBTITLE: Asignatura: Verificación de circuitos digitales
#+AUTHOR: Eduardo Vázquez Díaz {{{NEWLINE}}} lalohao@gmail.com
#+LaTeX_CLASS: IEEEtran
#+LANGUAGE: es
#+OPTIONS: _:nil

#+BEGIN_abstract
Se creó una maquina virtual con /Ubuntu Desktop 16.04.1/ _LTS_ en un
contenedor utilizando el software de virtualizacion =Qemu=, donde
posteriormente se instaló =verilator= y =gtkwave=; a partir de este
sistema se exponen algunas técnicas para simular circuitos con
verilog/C++, además de visualizar las ondas generadas de manera
gráfica.
#+END_abstract

* Introducción
  La importancia de probar los circuitos antes de ser llevados al
  silicio puede representar millones de dolares, sin contar el tiempo
  invertido en el diseño, y el que se necesitará volver a invertir
  para arreglarlo.

  En 1990 el lenguaje de descripción de hardware mas usado era VHDL a
  pesar de que solo tenia constructores básicos para probar
  (TestBench) los circuitos. Los diseños empezaban a crecer y nuevo
  software comercial se creaba para compensar la falta de funciones.
  Algunas empresas invertían horas de trabajo para crear su propio
  sistema y no pagar los miles de dolares en licencias, una de ellas
  llevó a la creación de Accelera que fue la base de SystemVerilog
  cite:spear08_system.

  De la misma manera surgió =Verilator=, un simulador potente de
  Verilog HDL que además es software libre, este compila el código y
  lo optimiza para ser simulado rápidamente cite:verilator-intro, en
  algunos casos es incluso mas veloz que los simuladores comerciales
  cite:verilator-vs-comercial.

** Virtualización
   La maquina virtual permite encapsular el sistema de verificación de
   circuitos en un contenedor que no será afectado (y que no afectará)
   la maquina utilizada, esto elimina errores que podrian ser causados
   al tener instalado software que utilice configuraciones con
   variables globales (PATHS) como ocurre con =HSPICE= y =Questa SIM=
   por ejemplo.

   #+CAPTION: Las maquinas virtuales pueden o no conectarse entre ellas o hacia la red externa y pueden ser de diferentes arquitecturas y sistemas operativos independientemente del sistema anfitrion.
   #+NAME: fig:virtualizacion
   #+ATTR_LATEX: :width 7cm
   #+ATTR_LATEX: :float
   [[file:virtualizacion.jpg]]

   Se le dice anfitrión a la maquina donde se encuentran los
   contenedores virtuales, en este caso la anfitriona usa /Arch
   Linux/, pero esto no afecta a los contenedores ya que estan
   aislados, por lo que esto se puede aplicar de igual manera en
   Windows o Mac.
* Desarrollo
  Para instalar la maquina virtual se utiliza la linea de comandos,
  creando el disco duro virtual llamado *verif*, con un tamaño de
  10Gb, posteriormente se carga el archivo =ISO= de Ubuntu en el disco
  duro creado, con 2G de memoria RAM y se procede a instalar el
  sistema operativo de forma normal.

  #+BEGIN_SRC bash :exports code
    qemu-img create -f raw verif 10G
    qemu-system-x86_64 -cdrom ubuntu.iso \
                       --boot order=d -drive \
                       file=verif,format=raw \
                       -m 2G
  #+END_SRC

  Una vez instalado el sistema operativo se puede iniciar de la
  siguiente forma:

  #+BEGIN_SRC bash :exports code
    qemu-system-x86_64 --boot order=d \
       -drive file=verif,format=raw -m 2G
  #+END_SRC

  Posteriormente en la maquina virtual (Ubuntu) se instala el software
  necesario para simular cite:verilator-instalacion, al igual que el
  editor de texto de su preferencia para modificar los archivos :

  #+BEGIN_SRC bash :exports code
    sudo apt-get install git make \
         autoconf g++ flex bison \
         verilator gtkwave
  #+END_SRC
** Ejemplo 1: Compuerta AND
   :PROPERTIES:
   :ID:       51264eef-d888-4bbb-933e-983c0be58cb7
   :END:
   Para entender el proceso de simulación es necesario entender la
   estructura jerárquica del espacio de trabajo.

   Clona el siguiente repositorio:

   #+BEGIN_SRC shell
     git clone \
     github.com/LaloHao/verilator_test
   #+END_SRC

   Dentro se encuentra una carpeta donde se simula la compuerta =and=,
   en ella se encuentran los siguientes archivos:

   #+BEGIN_SRC bash
     cand_tb.cpp
     cand.v
     cand.vcd
     Makefile
     README.md
   #+END_SRC

   El archivo =README= se puede ignorar; los archivos donde se
   describe el comportamiento y el testbench son *cand.v*,
   *cand-tb.cpp* respectivamente, después se encuentra el archivo
   *cand.vcd* que es utilizado por el programa =gtkwave= para
   visualizar las ondas al simularse, por ultimo el archivo *Makefile*
   donde contienen todos los comandos necesarios para ejecutar y abrir
   el visor de ondas.

   Dentro de la carpeta /and/ al ejecutar el comando =make= se
   simulará, ejecutará, y abrirá el visor de ondas automáticamente.

   #+CAPTION: Visor de ondas mostrando la simulacion de la compuerta =and=.
   #+NAME: fig:gtkwave
   #+ATTR_LATEX: :width 9cm
   #+ATTR_LATEX: :float
   [[file:data/51/264eef-d888-4bbb-933e-983c0be58cb7/screenshot-20170217-105525.png]]

   El archivo con extensión *.v* describe el comportamiento del
   circuito como ya se mencionó, estas son sentencias Verilog
   pertinentes al lenguaje por lo que se omite la explicación de su
   contenido.

*** Testbench
    El archivo de testbench (extensión *.cpp*) contiene las
    instrucciones necesarias para simular.

    Al ejecutarse el comando =make= Verilator genera los archivos
    *Vcand.cpp* y *Vcand.h* dentro de una carpeta llamada /obj_dir/
    donde se contienen funciones que son llamadas para controlar el
    flujo de señales y agregarlas al archivo *.vcd* donde se
    visualizaran, por ello es necesario incluirlo para referenciarlas
    desde el testbench al igual que los /headers/ de Verilator:

    #+BEGIN_SRC cpp
      #include "Vcand.h"
      #include "verilated.h"
      #include "verilated_vcd_c.h"
    #+END_SRC

    Dentro del testbench se crea un pulso de reloj que se utiliza como
    referencia para controlar el tiempo que correrá la simulación.

    #+BEGIN_SRC cpp
         int clk;
    #+END_SRC

    Las siguientes lineas son para Verilator exceptuando las que
    contienen referencias a *Vcand* y *VcdC*; *Vcand* instancia el
    objeto *cand.v* el cual se incluyó anteriormente, *Vcdc* es la
    instancia del objeto donde se guardarán las ondas para
    visualizacion.

    #+BEGIN_SRC cpp
        Verilated::commandArgs(argc, argv);
        Vcand *top = new Vcand;
        Verilated::traceEverOn(true);
        VerilatedVcdC *tfp = new VerilatedVcdC;
    #+END_SRC

    El objeto llamado *top* es el archivo *cand.v*, desde ahí se
    pueden inicializar y modificar las señales, de igual el objeto
    *tfp* define en que archivo se guardarán las ondas, se enlazan por
    medio de =trace=:

    #+BEGIN_SRC cpp
      top->trace(tfp, 99);
      tfp->open("cand.vcd");
      top->a = 0;
      top->b = 0;
    #+END_SRC

    Se usa un ciclo y envían todas las señales posibles usando
    =dump= para volcar las señales al archivo:

    #+BEGIN_SRC cpp
      for(clk = 0; clk <= 4; clk++)
      {
          tfp->dump(clk);
          top->a = !top->a;
          top->b = (clk >= 1);
          top->eval();
      }
    #+END_SRC

    Finalmente se dan las instrucciones pertinentes a Verilator para
    terminar la simulación:

    #+BEGIN_SRC cpp
      if(Verilated::gotFinish())
          exit(0);
      tfp->close();
      exit(0);
    #+END_SRC

    Los nombres descriptivos de variables facilitan el reconocimiento
    de cada objeto en proyectos mas grandes, como se verá en el
    siguiente ejemplo.
** Ejemplo 2: Memoria RAM

   Clona el repositorio:

   #+BEGIN_SRC shell
     git clone \
     github.com/LaloHao/8bit-cpu
   #+END_SRC

   En el se encuentran un diseño de una memoria RAM y un CPU ([[*Ejemplo 3: CPU][Ejemplo 3: CPU]]).

   #+BEGIN_SRC shell
     cpu.v
     cpu_tb.v
     ram.v
     ram_tb.v
   #+END_SRC
*** Testbench
    El archivo *ram_tb.v* contiene el testbench, algunos nombres de
    variables se han cambiado para dar mas claridad, por ejemplo:

    #+BEGIN_SRC cpp
      VerilatedVcdC * gtkw = new VerilatedVcdC;
      Vram *ram = new Vram;
      ram->trace(gtkw, 99);
      gtkw->open("ram.vcd");
    #+END_SRC

    Recordando que al estar usando un lenguaje como C++ se tiene todos
    sus operadores:

    #+BEGIN_SRC cpp
      #define WRITE 1
      #define READ 0
    #+END_SRC

    Permitiendo definir la operación que realiza la RAM:

    #+BEGIN_SRC cpp
      ram->rw = WRITE;
      ram->rw = READ;
    #+END_SRC
**** Escritura
     :PROPERTIES:
     :ID:       6dc8aff4-6c73-44ff-8d65-ce89a75c1214
     :END:

     #+CAPTION: Escritura de RAM con datos aleatorios, es importante destacar que aunque =datain= cambie en cada pulso de reloj, la RAM solo guarda su valor en =risingedge= (cuando esta subiendo).
     #+NAME: fig:ram-escritura
     #+ATTR_LATEX: :width 9cm
     #+ATTR_LATEX: :float
     [[file:data/6d/c8aff4-6c73-44ff-8d65-ce89a75c1214/screenshot-20170328-102212.png]]

     Se llenan todas las direcciones =addr= de memoria colocando en su
     entrada =datain= un valor aleatorio modulo 16 para limitarlo
     entre 0 y 15.
     #+BEGIN_SRC cpp -r
       while(i <= 15)
       {
           gtkw->dump(clk);
           if(j%2)
               i++;
           ram->datain = rand() % 16; (ref:rand)
           ram->addr = i;
           ram->clk = !ram->clk;
           ram->eval();
           clk++;
           j++;
       }
     #+END_SRC
**** Lectura
     :PROPERTIES:
     :ID:       b1bb507c-4cfa-404e-bf25-9e3a67321466
     :END:

     #+CAPTION: Lectura de RAM.
     #+NAME: fig:ram-lectura
     #+ATTR_LATEX: :width 9cm
     #+ATTR_LATEX: :float
    [[file:data/b1/bb507c-4cfa-404e-bf25-9e3a67321466/screenshot-20170328-102545.png]]
**** Reset
     :PROPERTIES:
     :ID:       c9deffbd-c88e-4470-adce-81f482ababd4
     :END:

     #+CAPTION: Verificacion de reset en la memoria RAM
     #+NAME: fig:ram-escritura
     #+ATTR_LATEX: :width 9cm
     #+ATTR_LATEX: :float
     [[file:data/c9/deffbd-c88e-4470-adce-81f482ababd4/screenshot-20170405-000909.png]]


** TODO Ejemplo 3: CPU

** TODO Ejemplo 4: Receptor UART
* Referencias                                                      :no_title:
  #+BIBLIOGRAPHY: bibliografia.bib plain limit:t
* Apéndices                                                        :no_title:
  \appendices
* Emacs
  :PROPERTIES:
  :ID:       2dd52799-180b-4118-8ce0-7e675d204eda
  :END:

  #+CAPTION: La maquina virtual contiene un editor de texto llamado =Emacs=, este interactua directamente con =Verilator= mostrando mensajes de error.
  #+NAME: fig:
  #+ATTR_LATEX: :width 10cm
  #+ATTR_LATEX: :float
  [[file:data/2d/d52799-180b-4118-8ce0-7e675d204eda/screenshot-20170327-121157.png]]

  #+CAPTION: Se puede acceder al tutorial de emacs dentro de el presionando =Ctrl+h= y despues =t=.
  #+NAME: fig:
  #+ATTR_LATEX: :width 10cm
  #+ATTR_LATEX: :float
  [[file:data/2d/d52799-180b-4118-8ce0-7e675d204eda/screenshot-20170327-121659.png]]
